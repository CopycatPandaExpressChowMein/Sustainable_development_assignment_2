
think of this 

1.Find bugs early, before someone else finds them.
2. Provide the feeling that your software is correct.

Finds problems early in the development cycle

Problems beeing:

bugs in the programmer's implementation
flaws or missing parts of the

---- importent -----
You need to think about how to use your code
You need to write code that is testable
The result is testable and good code (better than code that is hard to test)

- test suites can have meny components like all the tests 
- it can report it in jeson or other document where it shows the result and when it ran
( this show how mutch effort he programer has done and how it )

Test fixture
Test case
Test suite
Test runner
Assertions


-- importent --
Verify (assert) that each test produces expected result or behaviour
"If there is no assertion, then there is no test."

-- importent--
py doc under the code  for each line where it does say what it does

-- test classes typed realy good and easy names
- test methods realy long


- tes cases are realy importent : instantsiet an object and chek its properties
( verify if somthign has changed , even if it is obvyes in the code we need to asert it)


- in each test method is a blank page: 
  def setu(self)
     self.widget = widget("the widget")  <- befor and after each test method

    -annan variant-    

    each test method shuld be run in isolation 

sipping test cases when doin the test is possible


py testing / unit testing = need a proper documentation 
 - readme , txt etc

 code coverage.py 
  - pinpoit each line when the code is run /green or red values/
   what part we did cover are show in green and the red ones show what is wrong

  html report is good 


  terminal gui where all the print come out  jeson grapical or other gui

  try to think difrent said mikael  : orgenise it so the prints are in one lokatione 
  - capture it where the terminal show ( another tactike)

  unitttest.mock  can mock a method/function and captuer how it is calls
   - helps you how it appears 



   filenotfounderr  can be used when files are not found to do in unit testing


   can only test the public methods of a classes
    - api 
      - frome one clas to a nother this are public you can use this.



tatctic: test all  posible execution paths
 - use skip desing cases show whats not tested
 - start with the ones that are main execution paths provide atcual correcct values
 -continue to add tes cases show exepted ...
 - continue with all the areas that migth go worong

 eventlualy u will say this is enough